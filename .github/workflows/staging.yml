name: Python staging workflow

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      app-dependencies-manifests:
        required: false
        type: string
      app-manifests:
        required: true
        type: string
      skiptests:
        required: false
        type: boolean
        default: false
      skiplint:
        required: false
        type: boolean
        default: false
      run-tests-command:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      KUBERNETES_URL:
        required: true
      KUBERNETES_SECRET:
        required: true
      CLIENT_SERVICE_PAT:
        required: true

jobs:
  lint:
    if: ${{ ! inputs.skiplint }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Build linting containers
      run: docker build -t ${{ inputs.service-name }}-lint -f docker/Dockerfile.lint .

    - name: Run linting
      run: docker run --rm ${{ inputs.service-name }}-lint

  tests:
    if: ${{ ! inputs.skiptests }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Build tests
      run: docker compose -f docker-compose.test.yml build

    - name: Run tests
      run: docker compose -f docker-compose.test.yml run --rm app ${{ inputs.run-tests-command }}

  build:
    needs: [ tests, lint ]
    if: |
      always() &&
      (needs.tests.result == 'skipped' || needs.tests.result == 'success') &&
      (needs.lint.result == 'skipped' || needs.lint.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push the docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.service-name }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.service-name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [ build ]
    if: always() && needs.build.result == 'success'
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Set the kubernetes context
        uses: azure/k8s-set-context@v2
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_URL }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Deploy app dependencies
        if: inputs.app-dependencies-manifests != ''
        uses: azure/k8s-deploy@v1
        with:
          namespace: stage
          manifests: ${{ inputs.app-dependencies-manifests }}

      - name: Deploy app
        uses: azure/k8s-deploy@v1
        with:
          namespace: stage
          manifests: ${{ inputs.app-manifests }}
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.service-name }}:${{ github.sha }}

  update-mesh:
    needs: [ deploy ]
    if: always() && needs.deploy.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Refresh graphql-mesh front-end service
        run: |
          curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.CLIENT_SERVICE_PAT }}" \
          --data '{"ref": "main"}' \
          https://api.github.com/repos/chack-check/client-diffaction-service/actions/workflows/cicd-stage.yml/dispatches
